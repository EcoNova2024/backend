definitions:
  models.AddRating:
    properties:
      product_id:
        type: string
      score:
        type: number
    type: object
  models.AddTransactionRequest:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/models.TransactionAction'
        description: Action type of the transaction
      description:
        description: Description of the transaction
        type: string
      image_url:
        description: URL of the transaction image
        type: string
      price:
        description: Price of the transaction
        type: number
    type: object
  models.DetailedProductResponse:
    properties:
      category:
        description: Category of the product
        type: string
      created_at:
        description: Timestamp when the product was created
        type: string
      description:
        description: Product description
        type: string
      id:
        description: Product ID
        type: string
      name:
        description: Product name
        type: string
      price:
        description: Product price
        type: number
      rating:
        description: Product rating
        type: integer
      rating_average:
        description: Product rating average
        type: number
      rating_count:
        description: Product rating count
        type: integer
      status:
        $ref: '#/definitions/models.ProductStatus'
      sub_category:
        description: Subcategory of the product
        type: string
      transactions:
        description: List of transactions related to the product
        items:
          $ref: '#/definitions/models.DetailedTransaction'
        type: array
      user_id:
        description: Associated user (owner of the product)
        type: string
    type: object
  models.DetailedTransaction:
    properties:
      action:
        $ref: '#/definitions/models.TransactionAction'
      description:
        description: Description of the transaction
        type: string
      id:
        description: Primary key, unique identifier for each transaction
        type: string
      item_id:
        description: Reference to the product involved in the transaction
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.ProductRequest:
    properties:
      category:
        description: Category of the product
        type: string
      description:
        description: Description of the product
        type: string
      image_url:
        description: URL of the transaction image
        type: string
      name:
        description: Name of the product
        type: string
      price:
        description: Price of the product
        type: number
      status:
        allOf:
        - $ref: '#/definitions/models.ProductStatus'
        description: Status of the product (optional during request)
      sub_category:
        description: Subcategory of the product
        type: string
      user_id:
        description: ID of the user creating the product
        type: string
    type: object
  models.ProductResponse:
    properties:
      category:
        description: Category of the product
        type: string
      created_at:
        description: Timestamp when the product was created
        type: string
      description:
        description: Product description
        type: string
      id:
        description: Product ID
        type: string
      name:
        description: Product name
        type: string
      price:
        description: Product price
        type: number
      rating:
        description: Product rating
        type: integer
      rating_average:
        description: Product rating average
        type: number
      rating_count:
        description: Product rating count
        type: integer
      status:
        $ref: '#/definitions/models.ProductStatus'
      sub_category:
        description: Subcategory of the product
        type: string
      transactions:
        description: List of transactions related to the product
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Associated user (owner of the product)
    type: object
  models.ProductStatus:
    enum:
    - available
    - restored
    - sold
    type: string
    x-enum-varnames:
    - StatusAvailable
    - StatusRestored
    - StatusSold
  models.Rating:
    properties:
      created_at:
        type: string
      id:
        type: string
      product_id:
        type: string
      score:
        type: number
      user_id:
        type: string
    type: object
  models.SendEmailVerification:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.SendPasswordResetEmail:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.SignUp:
    properties:
      email:
        type: string
      image_url:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.Transaction:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/models.TransactionAction'
        description: Action type of the transaction
      created_at:
        description: Transaction timestamp
        type: string
      description:
        description: Description of the transaction
        type: string
      id:
        description: Primary key, unique identifier for each transaction
        type: string
      image_url:
        description: URL of the transaction image
        type: string
      item_id:
        description: Reference to the product involved in the transaction
        type: string
      user_id:
        description: Reference to the user performing the transaction
        type: string
    type: object
  models.TransactionAction:
    enum:
    - submitted
    - revitalized
    - sold
    type: string
    x-enum-varnames:
    - Submitted
    - Revitalized
    - Sold
  models.UpdateEmail:
    properties:
      new_email:
        type: string
    required:
    - new_email
    type: object
  models.UpdatePassword:
    properties:
      new_password:
        minLength: 6
        type: string
    required:
    - new_password
    type: object
  models.UpdateUser:
    properties:
      new_image:
        minLength: 6
        type: string
      new_user:
        minLength: 6
        type: string
    required:
    - new_image
    - new_user
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      password:
        type: string
      verified:
        type: boolean
    type: object
info:
  contact: {}
  description: Bearer token for authorization
  title: Econova API
  version: "1.0"
paths:
  /products:
    get:
      description: Get a product by its unique ID
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DetailedProductResponse'
      summary: Get a product by ID
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product with the given details
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductResponse'
      summary: Create a new product
      tags:
      - Products
  /products/collaborative:
    get:
      description: Retrieve products based on collaborative filtering
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductResponse'
            type: array
      summary: Get collaborative recommendations
      tags:
      - Products
  /products/content-based:
    get:
      description: Retrieve products based on content-based filtering using an image
        URL
      parameters:
      - description: Image URL
        in: query
        name: image_url
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductResponse'
            type: array
      summary: Get content-based recommendations
      tags:
      - Products
  /products/random:
    get:
      description: Retrieve random products for unauthenticated users
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductResponse'
            type: array
      summary: Get random products
      tags:
      - Products
  /products/rated:
    get:
      consumes:
      - application/json
      description: Fetches a list of products rated by the specified user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of rated products
          schema:
            items:
              $ref: '#/definitions/models.ProductResponse'
            type: array
      summary: Get rated products by user ID
      tags:
      - Products
  /products/restored:
    get:
      description: Retrieve products with the status "restored"
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductResponse'
            type: array
      summary: Get restored products
      tags:
      - Products
  /products/user:
    get:
      description: Get all products for a specific user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductResponse'
            type: array
      summary: Get products by user ID
      tags:
      - Products
  /ratings:
    post:
      consumes:
      - application/json
      description: Creates a new rating for a product by a user
      parameters:
      - description: Rating details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddRating'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Rating'
      summary: Create a new rating
      tags:
      - Ratings
  /ratings/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a rating by its ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete a rating
      tags:
      - Ratings
  /ratings/product/{product_id}/average:
    get:
      consumes:
      - application/json
      description: Retrieves the average rating and the total number of ratings for
        a specific product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get average rating and count by product ID
      tags:
      - Ratings
  /ratings/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves all products rated by a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Rating'
            type: array
      summary: Get rated products by user ID
      tags:
      - Ratings
  /transactions/{item_id}:
    post:
      consumes:
      - application/json
      description: Adds a transaction (submitted, revitalized, or sold) to an item
      parameters:
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      - description: Transaction details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AddTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Transaction'
      summary: Add transaction to item
      tags:
      - Transactions
  /users:
    put:
      consumes:
      - application/json
      description: Update user information with provided user data.
      parameters:
      - description: User data for update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User ID not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update User
      tags:
      - Users
  /users/{id}:
    get:
      description: Retrieve demographic information for a specific user by ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User demographic information
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get User Demographics
      tags:
      - Users
  /users/email:
    get:
      consumes:
      - application/json
      description: Retrieves a user by their email address from query parameters
      parameters:
      - description: Email Address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user by email
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user's email address with a new email.
      parameters:
      - description: New Email for update
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEmail'
      produces:
      - application/json
      responses:
        "200":
          description: Email updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User ID not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update User Email
      tags:
      - Users
  /users/email/send-verification:
    post:
      consumes:
      - application/json
      description: Sends an email verification link to the user's email
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.SendEmailVerification'
      produces:
      - application/json
      responses:
        "200":
          description: Verification email sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to send verification email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send Email Verification
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token.
      parameters:
      - description: Login credentials for authentication
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Users
  /users/password:
    put:
      consumes:
      - application/json
      description: Update user's password with a new password using a reset token.
      parameters:
      - description: JWT token for user authentication
        in: query
        name: token
        required: true
        type: string
      - description: New Password for update
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update password
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update User Password
      tags:
      - Users
  /users/password/reset:
    post:
      consumes:
      - application/json
      description: Sends a password reset email to the user with provided email.
      parameters:
      - description: User Email for password reset
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.SendPasswordResetEmail'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to send reset email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send Password Reset Email
      tags:
      - Users
  /users/search:
    get:
      consumes:
      - application/json
      description: Retrieves up to 10 users whose names start with the provided prefix.
      parameters:
      - description: Name prefix to search for
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get users by name prefix
      tags:
      - Users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with provided user data.
      parameters:
      - description: User data for registration
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignUp'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Registration
      tags:
      - Users
  /users/verify:
    post:
      consumes:
      - application/json
      description: Verify the user's email address using a verification token.
      parameters:
      - description: Verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email verified successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to verify email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify User Email
      tags:
      - Users
security:
- ApiKeyAuth: []
securityDefinitions:
  ApiKeyAuth:
    description: Bearer token for authorization
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
