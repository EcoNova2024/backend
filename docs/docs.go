// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/products": {
            "get": {
                "description": "Get a product by its unique ID",
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DetailedProductResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new product with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Product data",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ProductResponse"
                        }
                    }
                }
            }
        },
        "/products/collaborative": {
            "get": {
                "description": "Retrieve products based on collaborative filtering",
                "tags": [
                    "Products"
                ],
                "summary": "Get collaborative recommendations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductResponse"
                            }
                        }
                    }
                }
            }
        },
        "/products/content-based": {
            "get": {
                "description": "Retrieve products based on content-based filtering using an image URL",
                "tags": [
                    "Products"
                ],
                "summary": "Get content-based recommendations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image URL",
                        "name": "image_url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductResponse"
                            }
                        }
                    }
                }
            }
        },
        "/products/random": {
            "get": {
                "description": "Retrieve random products for unauthenticated users",
                "tags": [
                    "Products"
                ],
                "summary": "Get random products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductResponse"
                            }
                        }
                    }
                }
            }
        },
        "/products/rated": {
            "get": {
                "description": "Fetches a list of products rated by the specified user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get rated products by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of rated products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductResponse"
                            }
                        }
                    }
                }
            }
        },
        "/products/restored": {
            "get": {
                "description": "Retrieve products with the status \"restored\"",
                "tags": [
                    "Products"
                ],
                "summary": "Get restored products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductResponse"
                            }
                        }
                    }
                }
            }
        },
        "/products/user": {
            "get": {
                "description": "Get all products for a specific user",
                "tags": [
                    "Products"
                ],
                "summary": "Get products by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductResponse"
                            }
                        }
                    }
                }
            }
        },
        "/ratings": {
            "post": {
                "description": "Creates a new rating for a product by a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Create a new rating",
                "parameters": [
                    {
                        "description": "Rating details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddRating"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Rating"
                        }
                    }
                }
            }
        },
        "/ratings/product/{product_id}/average": {
            "get": {
                "description": "Retrieves the average rating and the total number of ratings for a specific product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Get average rating and count by product ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ratings/user/{user_id}": {
            "get": {
                "description": "Retrieves all products rated by a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Get rated products by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Rating"
                            }
                        }
                    }
                }
            }
        },
        "/ratings/{id}": {
            "delete": {
                "description": "Deletes a rating by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Delete a rating",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rating ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/transactions/{item_id}": {
            "post": {
                "description": "Adds a transaction (submitted, revitalized, or sold) to an item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Add transaction to item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transaction details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    }
                }
            }
        },
        "/users": {
            "put": {
                "description": "Update user information with provided user data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "description": "User data for update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "User ID not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/email": {
            "get": {
                "description": "Retrieves a user by their email address from query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email Address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update user's email address with a new email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User Email",
                "parameters": [
                    {
                        "description": "New Email for update",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "User ID not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/email/send-verification": {
            "post": {
                "description": "Sends an email verification link to the user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Send Email Verification",
                "parameters": [
                    {
                        "description": "User Email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SendEmailVerification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification email sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to send verification email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials for authentication",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/password": {
            "put": {
                "description": "Update user's password with a new password using a reset token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token for user authentication",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "New Password for update",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdatePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/password/reset": {
            "post": {
                "description": "Sends a password reset email to the user with provided email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Send Password Reset Email",
                "parameters": [
                    {
                        "description": "User Email for password reset",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SendPasswordResetEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to send reset email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/search": {
            "get": {
                "description": "Retrieves up to 10 users whose names start with the provided prefix.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get users by name prefix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name prefix to search for",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/signup": {
            "post": {
                "description": "Register a new user with provided user data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "User data for registration",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SignUp"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/verify": {
            "post": {
                "description": "Verify the user's email address using a verification token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Verify User Email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verified successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to verify email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve demographic information for a specific user by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User Demographics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User demographic information",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AddRating": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                }
            }
        },
        "models.AddTransactionRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action type of the transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionAction"
                        }
                    ]
                },
                "description": {
                    "description": "Description of the transaction",
                    "type": "string"
                },
                "image_url": {
                    "description": "URL of the transaction image",
                    "type": "string"
                },
                "price": {
                    "description": "Price of the transaction",
                    "type": "number"
                }
            }
        },
        "models.DetailedProductResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category of the product",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp when the product was created",
                    "type": "string"
                },
                "description": {
                    "description": "Product description",
                    "type": "string"
                },
                "id": {
                    "description": "Product ID",
                    "type": "string"
                },
                "name": {
                    "description": "Product name",
                    "type": "string"
                },
                "price": {
                    "description": "Product price",
                    "type": "number"
                },
                "rating": {
                    "description": "Product rating",
                    "type": "integer"
                },
                "rating_average": {
                    "description": "Product rating average",
                    "type": "number"
                },
                "rating_count": {
                    "description": "Product rating count",
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.ProductStatus"
                },
                "sub_category": {
                    "description": "Subcategory of the product",
                    "type": "string"
                },
                "transactions": {
                    "description": "List of transactions related to the product",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DetailedTransaction"
                    }
                },
                "user_id": {
                    "description": "Associated user (owner of the product)",
                    "type": "string"
                }
            }
        },
        "models.DetailedTransaction": {
            "type": "object",
            "properties": {
                "action": {
                    "$ref": "#/definitions/models.TransactionAction"
                },
                "description": {
                    "description": "Description of the transaction",
                    "type": "string"
                },
                "id": {
                    "description": "Primary key, unique identifier for each transaction",
                    "type": "string"
                },
                "item_id": {
                    "description": "Reference to the product involved in the transaction",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.ProductRequest": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category of the product",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the product",
                    "type": "string"
                },
                "image_url": {
                    "description": "URL of the transaction image",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the product",
                    "type": "string"
                },
                "price": {
                    "description": "Price of the product",
                    "type": "number"
                },
                "status": {
                    "description": "Status of the product (optional during request)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProductStatus"
                        }
                    ]
                },
                "sub_category": {
                    "description": "Subcategory of the product",
                    "type": "string"
                },
                "user_id": {
                    "description": "ID of the user creating the product",
                    "type": "string"
                }
            }
        },
        "models.ProductResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category of the product",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp when the product was created",
                    "type": "string"
                },
                "description": {
                    "description": "Product description",
                    "type": "string"
                },
                "id": {
                    "description": "Product ID",
                    "type": "string"
                },
                "name": {
                    "description": "Product name",
                    "type": "string"
                },
                "price": {
                    "description": "Product price",
                    "type": "number"
                },
                "rating": {
                    "description": "Product rating",
                    "type": "integer"
                },
                "rating_average": {
                    "description": "Product rating average",
                    "type": "number"
                },
                "rating_count": {
                    "description": "Product rating count",
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.ProductStatus"
                },
                "sub_category": {
                    "description": "Subcategory of the product",
                    "type": "string"
                },
                "transactions": {
                    "description": "List of transactions related to the product",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Transaction"
                    }
                },
                "user": {
                    "description": "Associated user (owner of the product)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                }
            }
        },
        "models.ProductStatus": {
            "type": "string",
            "enum": [
                "available",
                "restored",
                "sold"
            ],
            "x-enum-varnames": [
                "StatusAvailable",
                "StatusRestored",
                "StatusSold"
            ]
        },
        "models.Rating": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "product_id": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.SendEmailVerification": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.SendPasswordResetEmail": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "models.SignUp": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action type of the transaction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionAction"
                        }
                    ]
                },
                "created_at": {
                    "description": "Transaction timestamp",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the transaction",
                    "type": "string"
                },
                "id": {
                    "description": "Primary key, unique identifier for each transaction",
                    "type": "string"
                },
                "image_url": {
                    "description": "URL of the transaction image",
                    "type": "string"
                },
                "item_id": {
                    "description": "Reference to the product involved in the transaction",
                    "type": "string"
                },
                "user_id": {
                    "description": "Reference to the user performing the transaction",
                    "type": "string"
                }
            }
        },
        "models.TransactionAction": {
            "type": "string",
            "enum": [
                "submitted",
                "revitalized",
                "sold"
            ],
            "x-enum-varnames": [
                "Submitted",
                "Revitalized",
                "Sold"
            ]
        },
        "models.UpdateEmail": {
            "type": "object",
            "required": [
                "new_email"
            ],
            "properties": {
                "new_email": {
                    "type": "string"
                }
            }
        },
        "models.UpdatePassword": {
            "type": "object",
            "required": [
                "new_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "models.UpdateUser": {
            "type": "object",
            "required": [
                "new_image",
                "new_user"
            ],
            "properties": {
                "new_image": {
                    "type": "string",
                    "minLength": 6
                },
                "new_user": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Bearer token for authorization",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "ApiKeyAuth": []
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Econova API",
	Description:      "Bearer token for authorization",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
